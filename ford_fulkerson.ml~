open Graph
open Tools
open Path

let capacityToFlow gr =
  let f lbl = (0, lbl) in (* label = (flot, capacité) dans graphe de flot *)
  gmap gr f

let flowToResidual flow =
  let g1  = clone_nodes flow in
  let f1 g id1 id2 (a,b) = (* a=flot b=capacité *)
    match (a,b) with
    | (0,n) -> new_arc g id1 id2 n
    | (c,d) -> if c=d then new_arc g id2 id1 c else new_arc (new_arc g id1 id2 (d-c)) id2 id1 c
  in
  e_fold flow f1 g1

(* add flow value n to the old flow value on the arc *)
let add_flow g id1 id2 n =
  let value = find_arc g id1 id2 in
  match value with
  | Some (a,b) ->  new_arc g id1 id2 (a+n, b)
  | None -> g

let rec add_min flow res path min = (* takes a flow graph *)
  match path with
  | [] -> flow
  | [x] -> flow
  | x :: ( y :: rest) -> match ((find_arc res x y),(find_arc flow x y)) with
    | (None,_) -> failwith "invalid path or residual graph"
    | (_,None) -> add_min (add_flow flow y x (-min)) res (y::rest) min
    | (Some a, Some b) -> add_min (add_flow flow x y min) res (y::rest) min


let fordFulkerson gr source puit =
  let init = capacityToFlow gr in
  let rec f_aux flow source puit =
    let residual = flowToResidual flow in
    let path = find_path residual [] source puit in
    match path with
    | None -> flow
    | Some p -> f_aux (add_min flow residual p (find_min residual p 9999999) ) source puit
  in
  f_aux init source puit
